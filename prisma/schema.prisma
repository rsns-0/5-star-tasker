generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model unstructured_storage {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String   @default("")
  text       String   @default("")
  tags       String[] @default([])
  json       Json?
}

model webhooks {
  id                 BigInt           @id @default(autoincrement())
  created_at         DateTime         @default(now()) @db.Timestamptz(6)
  name               String           @default("")
  url                String           @default("")
  discord_channel_id BigInt
  discord_channels   discord_channels @relation(fields: [discord_channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model countries {
  id         BigInt      @id(map: "countries_pkey2") @default(autoincrement())
  name       String?
  iso2       String
  iso3       String?
  local_name String?
  continent  continents?
  flag       String?
}

model discord_channels {
  id               BigInt             @id @unique
  name             String             @default("")
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  discord_guild_id BigInt?
  discord_guilds   discord_guilds?    @relation(fields: [discord_guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discord_messages discord_messages[]
  reminders        reminders[]
  webhooks         webhooks[]
}

model discord_user {
  id               BigInt             @id @unique
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  username         String?            @default("")
  timezone_id      BigInt?
  discord_guilds   discord_guilds[]
  discord_messages discord_messages[]
  timezones        timezones?         @relation(fields: [timezone_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reminders        reminders[]
  id               BigInt             @id @unique
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  username         String?            @default("")
  timezone_id      BigInt?
  discord_guilds   discord_guilds[]
  discord_messages discord_messages[]
  timezones        timezones?         @relation(fields: [timezone_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reminders        reminders[]
}

model languages {
  id                     BigInt                @id @default(autoincrement())
  created_at             DateTime              @default(now()) @db.Timestamptz(6)
  name                   String                @unique
  iso_639_1              String                @unique
  iso_639_2              String                @unique
  is_supported_by_deep_l Boolean?              @default(false)
  discord_flag_emojis    discord_flag_emojis[]
}

model reminders {
  id               BigInt            @id @default(autoincrement())
  created_at       DateTime          @default(now()) @db.Timestamptz(6)
  user_id          BigInt?
  channel_id       BigInt?
  reminder_message String            @default("")
  time             Decimal           @db.Decimal
  discord_channels discord_channels? @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discord_user     discord_user?     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model test_countries {
  id         BigInt  @id(map: "countries_pkey") @default(autoincrement())
  name       String?
  iso2       String
  iso3       String?
  local_name String?
}

model test_table {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String?  @default("") @db.VarChar
  value      BigInt?  @default(0)
  text       String?  @default("")
}

model timezones {
  id           BigInt         @id @unique @default(autoincrement())
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  label        String
  description  String
  emoji        String
  value        String
  discord_user discord_user[]
}

model logs {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  level      Int?     @default(6) @db.SmallInt
  message    String?  @default("")
  json       Json?
  tags       String[] @default([])
}

model discord_guilds {
  id               BigInt             @id @unique
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  name             String             @default("")
  owner_id         BigInt?
  discord_channels discord_channels[]
  discord_user     discord_user?      @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
  discord_messages discord_messages[]
}

model discord_messages {
  id                 BigInt            @id @unique @default(autoincrement())
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  text               String            @default("")
  discord_channel_id BigInt?
  discord_guild_id   BigInt?
  owner_id           BigInt?
  discord_channels   discord_channels? @relation(fields: [discord_channel_id], references: [id], onUpdate: NoAction)
  discord_guilds     discord_guilds?   @relation(fields: [discord_guild_id], references: [id], onUpdate: NoAction)
  discord_user       discord_user?     @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
}

model countries_old {
  id          BigInt   @id(map: "countries_pkey1") @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  name        String   @unique(map: "countries_name_key")
  flag_emoji  String?  @unique(map: "countries_flag_emoji_key")
  language_id BigInt?
}

model rest_countries_api_data {
  id           Int      @id(map: "RestCountriesAPIData_pkey") @default(autoincrement())
  cca2         String
  ccn3         String?
  cca3         String
  cioc         String?
  independent  Boolean?
  unMember     Boolean
  capital      String[]
  altSpellings String[]
  subregion    String?
  languages    Json?
  translations Json
  latlng       Float[]
  landlocked   Boolean
  borders      String[]
  area         Float
  flag         String
  population   Int
  gini         Json?
  fifa         String?
  timezones    String[]
  capitalInfo  Json
  car          Json
  coatOfArms   Json
  flags        Json
  idd          Json
  maps         Json
  name         Json
  postalCode   Json?
  status       String
  region       Json
  continents   Json[]
  startOfWeek  Json
  currencies   Json?
  demonyms     Json?
}

model discord_flag_emojis {
  id          BigInt     @id @default(autoincrement())
  created_at  DateTime   @default(now()) @db.Timestamptz(6)
  value       String     @unique
  languagesId BigInt?
  language    languages? @relation(fields: [languagesId], references: [id], onDelete: Restrict, onUpdate: NoAction)
}

enum continents {
  Africa
  Antarctica
  Asia
  Europe
  Oceania
  North_America @map("North America")
  South_America @map("South America")
}
