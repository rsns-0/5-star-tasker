generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model countries {
  id         BigInt      @id(map: "countries_pkey2") @default(autoincrement())
  name       String?
  iso2       String
  iso3       String?
  local_name String?
  continent  continents?
  flag       String?
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model discord_channels {
  id         BigInt      @id @unique
  name       String?     @default("")
  created_at DateTime    @default(now()) @db.Timestamptz(6)
  reminders  reminders[]
}

model discord_user {
  id          BigInt      @id @unique
  created_at  DateTime    @default(now()) @db.Timestamptz(6)
  username    String?     @default("")
  timezone_id BigInt?
  timezones   timezones?  @relation(fields: [timezone_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reminders   reminders[]
}

model languages {
  id                     BigInt                @id @default(autoincrement())
  created_at             DateTime              @default(now()) @db.Timestamptz(6)
  name                   String                @unique
  iso_639_1              String                @unique
  iso_639_2              String                @unique
  is_supported_by_deep_l Boolean?              @default(false)
  discord_flag_emojis    discord_flag_emojis[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reminders {
  created_at       DateTime         @default(now()) @db.Timestamptz(6)
  user_id          String
  channel_id       String
  reminder_message String           @default("")
  time             Decimal          @db.Decimal
  webhook_id       String
  id               BigInt           @id @default(autoincrement())
  discord_channels discord_channels @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discord_user     discord_user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  webhooks         webhooks         @relation(fields: [webhook_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model test_countries {
  id         BigInt  @id(map: "countries_pkey") @default(autoincrement())
  name       String?
  iso2       String
  iso3       String?
  local_name String?
}

model test_table {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String?  @default("") @db.VarChar
  value      BigInt?  @default(0)
  text       String?  @default("")
}

model timezones {
  id           BigInt         @id @unique @default(autoincrement())
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  label        String
  description  String
  emoji        String
  value        String
  discord_user discord_user[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model discord_guilds {
  id               String             @id
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  name             String             @default("")
  owner_id         String?
  discord_channels discord_channels[]
  discord_user     discord_user?      @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
  discord_messages discord_messages[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model users {
  id         String       @id @db.Uuid
  username   String?
  status     user_status? @default(OFFLINE)
  channels   channels[]
  messages   messages[]
  user_roles user_roles[]
}

enum app_permission {
  channels_delete @map("channels.delete")
  messages_delete @map("messages.delete")
}

enum app_role {
  admin
  moderator
}

enum continents {
  Africa
  Antarctica
  Asia
  Europe
  Oceania
  North_America @map("North America")
  South_America @map("South America")
}
