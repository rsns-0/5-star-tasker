generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  enumFileName = "enums.ts"
  fileName     = "types.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model unstructured_storage {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String   @default("")
  text       String   @default("")
  tags       String[] @default([])
  json       Json?
}

model webhooks {
  id                 String           @id
  created_at         DateTime         @default(now()) @db.Timestamptz(6)
  name               String           @default("")
  url                String           @unique
  discord_channel_id String
  token              String?          @unique
  reminders          reminders[]
  discord_channels   discord_channels @relation(fields: [discord_channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model deleted_webhooks {
  db_id              Int       @id @default(autoincrement())
  id                 String?
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  name               String?
  url                String?
  discord_channel_id String?
  token              String?
}

model discord_channels {
  id               String             @id
  name             String             @default("")
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  discord_guild_id String
  discord_guilds   discord_guilds     @relation(fields: [discord_guild_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discord_messages discord_messages[]
  reminders        reminders[]
  webhooks         webhooks[]
}

model reminders {
  created_at       DateTime        @default(now()) @db.Timestamptz(6)
  user_id          String
  channel_id       String
  reminder_message String          @default("")
  webhook_id       String
  id               Int             @id @default(autoincrement())
  time             DateTime        @db.Timestamptz(6)
  
  discord_channels discord_channels @relation(fields: [channel_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  discord_user     discord_user     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  webhook          webhooks         @relation(fields: [webhook_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}


model discord_user {
  id                    String             @id @unique
  created_at            DateTime           @default(now()) @db.Timestamptz(6)
  username              String?            @default("")
  timezone_id           BigInt?
  discord_guilds        discord_guilds[]
  discord_messages      discord_messages[]
  timezones             timezones?         @relation(fields: [timezone_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  reminders             reminders[]
  discord_guilds_joined discord_guilds[]   @relation("discord_guilds_members")
}

model discord_guilds {
  id               String             @id
  created_at       DateTime           @default(now()) @db.Timestamptz(6)
  name             String             @default("")
  owner_id         String?
  iconURL          String?
  discord_channels discord_channels[]
  discord_user     discord_user?      @relation(fields: [owner_id], references: [id])
  discord_messages discord_messages[]
  members          discord_user[]     @relation("discord_guilds_members")
}

model discord_messages {
  id                 String            @id
  created_at         DateTime          @default(now()) @db.Timestamptz(6)
  text               String            @default("")
  discord_channel_id String?
  discord_guild_id   String?
  owner_id           String?
  discord_channels   discord_channels? @relation(fields: [discord_channel_id], references: [id], onUpdate: NoAction)
  discord_guilds     discord_guilds?   @relation(fields: [discord_guild_id], references: [id], onUpdate: NoAction)
  discord_user       discord_user?     @relation(fields: [owner_id], references: [id], onUpdate: NoAction)
}

model test_table {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String?  @default("") @db.VarChar
  value      BigInt?  @default(0)
  text       String?  @default("")
}

model timezones {
  id           BigInt         @id @unique @default(autoincrement())
  created_at   DateTime       @default(now()) @db.Timestamptz(6)
  label        String
  description  String
  emoji        String
  value        String
  discord_user discord_user[]
}

model logs {
  id          BigInt   @id @default(autoincrement())
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  level       Int      @default(6) @db.SmallInt
  message     String   @default("")
  json        Json?
  tags        String[] @default([])
  unsafe_json Json?
}

model rest_countries_api_new_data {
  id                               Int                           @id @default(autoincrement())
  cca2                             String
  ccn3                             String?
  cca3                             String
  cioc                             String?
  independent                      Boolean?
  unMember                         Boolean
  capital                          String[]
  altSpellings                     String[]
  subregion                        String?
  translations                     Json
  latlng                           Float[]
  landlocked                       Boolean
  borders                          String[]
  area                             Float
  flag                             String
  population                       Int
  gini                             Json?
  fifa                             String?
  timezones                        String[]
  capitalInfo                      Json
  car                              Json
  coatOfArms                       Json
  flags                            Json
  idd                              Json
  maps                             Json
  name                             String
  postalCode                       Json?
  status                           String
  region                           String
  continents                       String[]
  startOfWeek                      Json
  currencies                       Json?
  demonyms                         Json?
  rest_countries_api_data_names_id Int                           @unique
  spoken_languages                 Json?
  country_emoji                    country_emoji[]
  discord_flag_emojis              discord_flag_emojis?
  IBANCountryCodeData              IBANCountryCodeData[]
  NewCiaLanguageData               NewCiaLanguageData[]
  resolve_tie_data                 resolve_tie_data?
  rest_countries_api_data_names    rest_countries_api_data_names @relation(fields: [rest_countries_api_data_names_id], references: [id])
  WikiData                         WikiData[]
  WikiIsoData                      WikiIsoData?
  languages                        languages[]                   @relation("languagesTorest_countries_api_new_data")
}

model rest_countries_api_data_names {
  id                          Int                          @id @default(autoincrement())
  common                      String                       @unique
  official                    String                       @unique
  nativeName                  Json
  rest_countries_api_new_data rest_countries_api_new_data?
}

model test_pagination {
  id         BigInt   @id @default(autoincrement())
  created_at DateTime @default(now()) @db.Timestamptz(6)
  name       String?  @default("")
  value      BigInt?  @default(0)
  text       String?  @default("")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          roles     @default(user)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model rest_countries_api_data_languages {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  abbreviation String     @unique
  languages_id BigInt?    @unique
  languages    languages? @relation(fields: [languages_id], references: [id])
}

model deep_l_supported_languages {
  id           Int        @id @default(autoincrement())
  name         String
  abbreviation String     @unique
  languages_id BigInt?
  languages    languages? @relation(fields: [languages_id], references: [id])
}

model countries {
  id         BigInt      @id(map: "countries_pkey2") @default(autoincrement())
  name       String
  iso2       String      @unique
  iso3       String      @unique
  local_name String?
  continent  continents?
  flag       String?
}

model discord_flag_emojis {
  id          BigInt                       @id @default(autoincrement())
  created_at  DateTime                     @default(now()) @db.Timestamptz(6)
  value       String                       @unique
  languagesId BigInt?
  country_id  Int?                         @unique
  country     rest_countries_api_new_data? @relation(fields: [country_id], references: [id], onDelete: Restrict, onUpdate: NoAction)
  language    languages?                   @relation(fields: [languagesId], references: [id], onDelete: Restrict, onUpdate: NoAction)

  @@index([value], map: "discord_flag_emojis_value_hash_key", type: Hash)
}

model languages {
  id                                BigInt                             @id @default(autoincrement())
  created_at                        DateTime                           @default(now()) @db.Timestamptz(6)
  name                              String                             @unique
  iso1                              String?                            @unique @map("iso_639_1")
  iso2                              String?                            @unique @map("iso_639_2")
  is_supported_by_deep_l            Boolean?                           @default(false)
  iso2B                             String?                            @unique @map("iso_639_2b")
  deep_l_supported_languages        deep_l_supported_languages[]
  discord_flag_emojis               discord_flag_emojis[]
  LingoHubIsoMappings               LingoHubIsoMappings?
  NewCiaLanguageData                NewCiaLanguageData[]
  resolve_tie_data                  resolve_tie_data[]
  rest_countries_api_data_languages rest_countries_api_data_languages?
  WalsLanguageData                  WalsLanguageData[]
  WikiData                          WikiData[]
  rest_countries_api_new_data       rest_countries_api_new_data[]      @relation("languagesTorest_countries_api_new_data")

  @@map("languages")
}

model Command {
  name            String            @unique
  description     String
  id              Int               @id @default(autoincrement())
  CommandArgument CommandArgument[]

  @@map("commands")
}

model CommandArgument {
  name        String
  description String  @default("")
  id          Int     @id @default(autoincrement())
  commandId   Int     @map("command_id")
  command     Command @relation(fields: [commandId], references: [id])

  @@map("command_arguments")
}

model WikiData {
  id                             Int                          @id @default(autoincrement())
  widely_spoken                  String
  country_or_region              String                       @unique
  minority_language              String
  national_language              String
  official_language              String
  regional_language              String
  primary_language               String
  languages_id                   BigInt?
  rest_countries_api_new_data_id Int?
  languages                      languages?                   @relation(fields: [languages_id], references: [id])
  rest_countries_api_new_data    rest_countries_api_new_data? @relation(fields: [rest_countries_api_new_data_id], references: [id])

  @@map("wiki_data")
}

model NewCiaLanguageData {
  id                             Int                          @id @default(autoincrement())
  country                        String
  primary_language               String
  languages_id                   BigInt?
  rest_countries_api_new_data_id Int?
  languages                      languages?                   @relation(fields: [languages_id], references: [id])
  rest_countries_api_new_data    rest_countries_api_new_data? @relation(fields: [rest_countries_api_new_data_id], references: [id])

  @@map("new_cia_language_data")
}

model WalsLanguageData {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  walsCode     String     @map("wals_code")
  iso6393      String?
  genus        String
  family       String
  macroarea    String
  latitude     String
  longitude    String
  countries    String
  languages_id BigInt?
  languages    languages? @relation(fields: [languages_id], references: [id])

  @@map("wals_language_data")
}

model CongressIsoMappings {
  id                      Int                  @id @default(autoincrement())
  iso_639_2               String               @unique @map("iso_639_2")
  iso_639_1               String?              @unique @map("iso_639_1")
  name                    String               @map("english_name_of_language")
  french_name_of_language String               @map("french_name_of_language")
  german_name_of_language String               @map("german_name_of_language")
  languagesId             BigInt?              @unique @map("languages_id")
  LingoHubIsoMappings     LingoHubIsoMappings?

  @@map("congress_iso_mappings")
}

model LingoHubIsoMappings {
  id                  Int                 @id @default(autoincrement())
  iso1                String              @unique
  name                String              @unique @map("language")
  languagesId         BigInt?             @unique @map("languages_id")
  congressIsoMappings CongressIsoMappings @relation(fields: [iso1], references: [iso_639_1])
  languages           languages?          @relation(fields: [languagesId], references: [id])

  @@map("lingohub_iso_mappings")
}

model IBANCountryCodeData {
  id                             Int                          @id @default(autoincrement())
  alpha2Code                     String                       @unique @map("alpha_2_code")
  alpha3Code                     String                       @unique @map("alpha_3_code")
  numericCode                    Int                          @unique @map("numeric")
  country                        String                       @unique
  rest_countries_api_new_data_id Int?
  rest_countries                 rest_countries_api_new_data? @relation(fields: [rest_countries_api_new_data_id], references: [id])

  @@map("iban_country_code_data")
}

model WikiIsoData {
  id                     Int                         @id @default(autoincrement())
  name                   String                      @unique
  official_state_name    String
  sovereignty            String
  iso2                   String                      @unique
  iso3                   String                      @unique
  numeric_code           String                      @unique
  subdivision_code_links String                      @unique
  internet_cc_tld        String                      @unique
  rest_countries_data_id Int                         @unique
  rest_countries_data    rest_countries_api_new_data @relation(fields: [rest_countries_data_id], references: [id])

  @@map("wiki_iso_data")
}

model resolve_tie_data {
  id                             Int                         @id @default(autoincrement())
  created_at                     DateTime                    @default(now()) @db.Timestamptz(6)
  updated_at                     DateTime                    @updatedAt @db.Timestamptz(6)
  rest_countries_api_new_data_id Int                         @unique
  languages_id                   BigInt?
  languages                      languages?                  @relation(fields: [languages_id], references: [id])
  rest_countries_api_new_data    rest_countries_api_new_data @relation(fields: [rest_countries_api_new_data_id], references: [id])
}

model country_emoji {
  id                             Int                         @id @default(autoincrement())
  iso                            String
  emoji                          String
  unicode                        String
  name                           String
  rest_countries_api_new_data_id Int
  rest_countries_api_new_data    rest_countries_api_new_data @relation(fields: [rest_countries_api_new_data_id], references: [id])
}

view language_entries {
  id         BigInt
  type       String
  iso2       String
  name       String
  row_number BigInt @id
}

view country_entries {
  id         Int
  type       String
  iso2       String
  name       String
  row_number BigInt @id
}

view language_and_country_representations {
  id    Int      @id
  type  String
  iso2  String
  names String[]
}

view base_foreign_key_info {
  table_schema         Unsupported("name")  @id
  constraint_name      Unsupported("name")?
  table_name           Unsupported("name")?
  column_name          Unsupported("name")?
  foreign_table_schema Unsupported("name")?
  foreign_table_name   Unsupported("name")?
  foreign_column_name  Unsupported("name")?

  @@ignore
}

view language_aggregated {
  id         BigInt  @id
  iso_639_1  String?
  iso_639_2  String
  name       String
  weight     BigInt
  iso_639_2b String?
}

view country_aggregated {
  id     Int    @id
  cca3   String
  cca2   String
  name   String
  weight BigInt
}

view country_primary_languages {
  country_id              Int     @id
  country_name            String?
  primary_language        String?
  primary_language_id     BigInt?
  country_name_weight     BigInt?
  language_name_weight    BigInt?
  primary_language_weight Int?
}

view views {
  schemaname Unsupported("name")  @id
  viewname   Unsupported("name")?
  viewowner  Unsupported("name")?
  definition String?

  @@ignore
}

view dependent_views {
  name   Unsupported("name") @id
  tables Json

  @@ignore
}

view combined_data {
  id     Int     @id
  c_id   Int?
  l_id   BigInt?
  source String?
}

view table_info {
  table_name  Unsupported("name") @id
  column_name Unsupported("name")
  data_type   String              @db.VarChar

  @@ignore
}

view relations {
  constraint_name       Unsupported("name") @id
  table_name            Unsupported("name")
  column_name           Unsupported("name")
  foreign_table_name    Unsupported("name")
  foreign_column_name   Unsupported("name")
  table_columns         Json
  foreign_table_columns Json

  @@ignore
}

view primary_language_raw {
  country_id    Int     @id
  language_id   BigInt?
  weight        BigInt?
  rank          BigInt?
  language_name String?
  country_name  String?
}

view language_entries_per_country {
  id      Int     @id
  entries Json?
  name    String?
}

view full_country_primary_languages {
  country_id              Int     @id
  country_name            String
  primary_language        String
  primary_language_id     BigInt
  country_name_weight     BigInt
  language_name_weight    BigInt
  primary_language_weight Int
  cca2                    String
  cca3                    String
  iso1                    String?
  iso2                    String
  iso2b                   String?
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view dependent_views_2 {
  dependent_view Unsupported("name")?
  source_tables  Json?

  @@ignore
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view country_exceptions {
  id   Int?
  name String?

  @@ignore
}

view ties2 {
  country_id    Int     @id
  language_id   BigInt?
  weight        BigInt?
  country_name  String?
  language_name String?
}

view unresolved_ties {
  country_id   Int    @id
  country_name String
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view outdated_resolve_tie_data {
  id                             Int     @id
  rest_countries_api_new_data_id Int?
  languages_id                   BigInt?
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view up_to_date_resolve_tie_data {
  id                             Int     @id
  rest_countries_api_new_data_id Int?
  languages_id                   BigInt?
}

view country_primary_languages_resolved_ties {
  country_id    Int     @id
  language_id   BigInt?
  weight        BigInt?
  country_name  String?
  language_name String?
  rank          BigInt?
}

view validate_country_primary_languages_resolved_ties {
  country_id    Int    @id
  country_count BigInt
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view flag_language {
  id                      BigInt  @id
  flag_key                String
  flag_emoji              String
  country_name            String
  primary_language        String
  primary_language_id     BigInt
  cca2                    String
  cca3                    String
  iso1                    String?
  iso2                    String
  iso2b                   String?
  is_supported_by_deep_l  Boolean
  country_name_weight     BigInt
  language_name_weight    BigInt
  primary_language_weight Int
}

/// The underlying view does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
view flag_key_to_deep_l_iso_code {
  flag_key String @id
  iso_code String
}

view flag_key_to_deep_l_iso_code_materialized {
  flag_key String @id // has hash index in db
  iso_code String
}

enum roles {
  developer
  user
}

enum continents {
  Africa
  Antarctica
  Asia
  Europe
  Oceania
  North_America @map("North America")
  South_America @map("South America")
}
